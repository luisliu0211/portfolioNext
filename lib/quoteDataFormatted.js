import React from 'react';

export function quoteDataFormatted(data) {
  const {
    id,
    userId,
    createDate,
    lastRevise,
    state,
    fabricItem,
    description,
    width,
    gsm,
    gy,
    brand,
    machineType,
    machineSpec,
    other,
    densityWarp,
    densityWeft,
    fabricProcessFee,
    fabricCost,
    totalWastage,
    yarnTextStr,
    dyeCost,
    quoteUSDM,
    quoteUSDY,
    quoteTWDY,
    quoteTWDM,
    costTWDKG,
    costUSDKG,
    costUSDY,
    excuteCost,
    shippingCost,
    testingCost,
    profit,
    exchangeRate,
    tradeTerm,
    quoteDue,
    clientId,
    RDReference,
    yarnInfoList,
    process,
    specialProcess,
    fabricSpecStr,
  } = data;

  return {
    id,
    userId,
    createDate,
    lastRevise,
    state,
    fabricInfo: {
      clientId,
      fabricItem,
      description,
      width: parseFloat(width),
      gsm: parseFloat(gsm),
      gy: parseFloat(gy),
      brand,
      fabricSpecStr: fabricSpecStr,
    },
    yarnCost: {
      machineType,
      machineSpec,
      other,
      densityWarp,
      densityWeft,
      fabricProcessFee: parseFloat(fabricProcessFee),
      fabricCost: parseFloat(fabricCost),
      totalWastage: parseFloat(totalWastage),
      yarnTextStr: yarnTextStr,
      yarnInfoList,
      totalYarnCost: null,
    },
    dyeCost: {
      dyeAverageCost: parseFloat(dyeCost),
      process: process,
      specialProcess: specialProcess,
      totalCost: null,
      RDReference,
    },
    salesCost: {
      excuteCost: parseFloat(excuteCost),
      shippingCost: parseFloat(shippingCost),
      testingCost: parseFloat(testingCost),
      profit: parseFloat(profit),
      exchangeRate: parseFloat(exchangeRate),
      tradeTerm: parseFloat(tradeTerm),
      quoteDueDate: quoteDue,
      quoteUSDY: parseFloat(quoteUSDY),
      quoteUSDM: parseFloat(quoteUSDM),
      quoteTWDY: parseFloat(quoteTWDY),
      quoteTWDM: parseFloat(quoteTWDM),
      costTWDKG: parseFloat(costTWDKG),
      costUSDKG: parseFloat(costUSDKG),
      costUSDY: parseFloat(costUSDY),
    },
  };
}
export function quoteDataKeyTranslate(data) {
  const {
    id,
    userId,
    createDate,
    lastRevise,
    state,
    fabricItem,
    description,
    width,
    gsm,
    gy,
    brand,
    machineType,
    machineSpec,
    other,
    densityWarp,
    densityWeft,
    fabricProcessFee,
    fabricCost,
    totalWastage,
    yarnTextStr,
    dyeCost,
    quoteUSDM,
    quoteUSDY,
    quoteTWDY,
    quoteTWDM,
    costTWDKG,
    costUSDKG,
    costUSDY,
    excuteCost,
    shippingCost,
    testingCost,
    profit,
    exchangeRate,
    tradeTerm,
    quoteDue,
    clientId,
    RDReference,
    yarnInfoList,
    process,
    specialProcess,
    fabricSpecStr,
  } = data;
  return {
    編號: parseFloat(id),
    報價人: userId, //
    製作日期: createDate,
    更新日期: lastRevise,
    客戶: clientId, //
    狀態: state, //
    布號: fabricItem,
    品名: `${yarnInfoList} ${description} ${yarnTextStr} ${fabricSpecStr}`,
    幅寬: parseFloat(width),
    克重: parseFloat(gsm),
    碼重: parseFloat(gy),
    品牌: brand,
    織機: parseFloat(machineType), //
    織機規格: machineSpec,
    其他: other,
    經密: parseFloat(densityWarp),
    緯密: parseFloat(densityWeft),
    胚布工繳: parseFloat(fabricProcessFee),
    胚布成本: parseFloat(fabricCost),
    '總損耗%': parseFloat(totalWastage),
    染整工繳: parseFloat(dyeCost),
    報價USDM: parseFloat(quoteUSDM),
    報價USDY: parseFloat(quoteUSDY),
    成本TWDKG: parseFloat(costTWDKG),
    成本USDKG: parseFloat(costUSDKG),
    行政費用: parseFloat(excuteCost),
    運輸費用: parseFloat(shippingCost),
    測試費用: parseFloat(testingCost),
    '利潤%': parseFloat(profit),
    匯率: parseFloat(exchangeRate),
    貿易條件: tradeTerm, //
    報價期限: quoteDue,
    備註: RDReference,
    yarnInfoList, //
    process, //
    specialProcess, //
  };
}
